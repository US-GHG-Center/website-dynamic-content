#name: Update banner
#
#on:
#  issues:
#    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#issues
#    types:
#      - opened
#      - edited
#      - reopened
#      - labeled
#
#jobs:
#  update_files:
#    runs-on: ubuntu-latest
#    name: Convert New Issue to GHG Dashboard Dynamic Data
#    # require a `banner` label for moderation
#    if: contains( github.event.issue.labels.*.name, 'banner')
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: GitHub Issue to JSON
#        uses: zachleat/github-issue-to-json-file@v3.0.14
#        with:
#          # This tells the action which GitHub Issue Form template file to use
#          issue-template: "banner.yaml"
#          # This controls which property we use to key the file name hash off of (values should be unique in your data set)
#          hash-property-name: "url"
#
#      - name: Update the existing files
#        run: python banner.py
#
#      - name: Commit files
#        run: |
#          git config --local user.email "action@github.com"
#          git config --local user.name "GitHub Action"
#          git checkout -b staging
#          git add banner.json
#          git commit -m "Updating banner for #${{ env.IssueNumber }}"
#          git push

name: Update banner

on:
  issues:
    types:
      - opened
      - edited
      - reopened
      - labeled

jobs:
  update_files:
    runs-on: ubuntu-latest

    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository and create a pull request
      contents: write
      pull-requests: write

    name: Convert New Issue to GHG Dashboard Dynamic Data
    if: contains(github.event.issue.labels.*.name, 'banner')
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: GitHub Issue to JSON
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const issue = context.payload.issue;
            const jsonContent = JSON.stringify(issue, null, 2);
            if (!fs.existsSync('_data')){
              fs.mkdirSync('_data');
            }
            fs.writeFileSync('_data/banner.json', jsonContent);
            console.log('Issue converted to JSON and written to _data/banner.json');
            console.log('Content:', jsonContent);

      - name: List _data directory
        run: ls -l _data

      - name: Update the existing files
        run: python scripts/banner.py

      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b staging
          git add banner.json
          git commit -m "Updating banner for #${{ env.IssueNumber }}"
          git push --set-upstream origin staging
